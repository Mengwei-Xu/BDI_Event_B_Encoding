<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<org.eventb.core.machineFile org.eventb.core.configuration="org.eventb.core.fwd" version="5">
    <org.eventb.core.event name="'" org.eventb.core.convergence="0" org.eventb.core.extended="false" org.eventb.core.label="INITIALISATION">
        <org.eventb.core.action name="'" org.eventb.core.assignment="belief_base ≔ Initial_belief_base" org.eventb.core.label="act1"/>
        <org.eventb.core.action name="(" org.eventb.core.assignment="external_events ≔ Initial_external_event_set" org.eventb.core.label="act2"/>
        <org.eventb.core.action name=")" org.eventb.core.assignment="intentions ≔ ∅" org.eventb.core.label="act3"/>
    </org.eventb.core.event>
    <org.eventb.core.seesContext name="(" org.eventb.core.target="BDIPrograms"/>
    <org.eventb.core.event name=")" org.eventb.core.convergence="0" org.eventb.core.extended="false" org.eventb.core.label="AddressExternalEvent">
        <org.eventb.core.guard name="'" org.eventb.core.label="grd1" org.eventb.core.predicate="event ↦ terms ∈ external_events"/>
        <org.eventb.core.parameter name="(" org.eventb.core.identifier="event"/>
        <org.eventb.core.action name="*" org.eventb.core.assignment="intentions ≔ intentions ∪ {BasicP_event_intention(event ↦ terms)}" org.eventb.core.comment="Here for type convenience the external event is treated as a non-declarative problem which is the case " org.eventb.core.label="act1"/>
        <org.eventb.core.parameter name="+" org.eventb.core.identifier="terms"/>
        <org.eventb.core.action name="," org.eventb.core.assignment="external_events ≔ external_events ∖ {(event ↦ terms)} " org.eventb.core.label="act2"/>
    </org.eventb.core.event>
    <org.eventb.core.variable name="*" org.eventb.core.identifier="belief_base"/>
    <org.eventb.core.invariant name="+" org.eventb.core.label="inv1" org.eventb.core.predicate="belief_base ∈ ℙ(Belief_predicate_symbols × Terms)"/>
    <org.eventb.core.variable name="," org.eventb.core.identifier="external_events"/>
    <org.eventb.core.invariant name="-" org.eventb.core.label="inv2" org.eventb.core.predicate="external_events ∈ ℙ(Event_predicate_symbols × Terms)"/>
    <org.eventb.core.variable name="." org.eventb.core.identifier="intentions"/>
    <org.eventb.core.invariant name="/" org.eventb.core.label="inv3" org.eventb.core.predicate="intentions ∈ ℙ(IntentionP(Belief_predicate_symbols, Event_predicate_symbols, Action_predicate_symbols, Terms))"/>
    <org.eventb.core.event name="6" org.eventb.core.convergence="0" org.eventb.core.extended="false" org.eventb.core.label="SelectRelevantPlans">
        <org.eventb.core.parameter name="'" org.eventb.core.identifier="event"/>
        <org.eventb.core.guard name="(" org.eventb.core.label="grd1" org.eventb.core.predicate="intention ∈ intentions"/>
        <org.eventb.core.parameter name="*" org.eventb.core.identifier="terms"/>
        <org.eventb.core.parameter name="," org.eventb.core.identifier="intention"/>
        <org.eventb.core.guard name="6" org.eventb.core.label="grd2" org.eventb.core.predicate="nextP ↦ nextP_location ∈ next_programs_to_progress(intention, belief_base, Root)"/>
        <org.eventb.core.guard name="4" org.eventb.core.comment="check the chosen top element is a basic event program" org.eventb.core.label="grd3" org.eventb.core.predicate="isBasicP_event_intention(nextP)"/>
        <org.eventb.core.guard name="-" org.eventb.core.comment="destruct BasicP_event_intention to extract the terms and the event " org.eventb.core.label="grd4" org.eventb.core.predicate="basic_program_event_intention(nextP)=event↦terms"/>
        <org.eventb.core.action name="0" org.eventb.core.assignment="intentions ≔ (intentions∖{intention}) ∪ {update_location_with_new_program(nextP_location, newnextP)}" org.eventb.core.label="act1"/>
        <org.eventb.core.parameter name="5" org.eventb.core.identifier="nextP"/>
        <org.eventb.core.guard name=":" org.eventb.core.comment="there exists at least one relevant plan " org.eventb.core.label="grd5" org.eventb.core.predicate="plan_rules[{event ↦ terms}] ≠ ∅"/>
        <org.eventb.core.guard name="7" org.eventb.core.comment="if no revelant plan, plan_rules[{event ↦ terms}] returns empty set." org.eventb.core.label="grd6" org.eventb.core.predicate="newnextP = Relevant_plans(event↦terms, plan_rules[{event ↦ terms}])"/>
        <org.eventb.core.parameter name=";" org.eventb.core.identifier="nextP_location"/>
        <org.eventb.core.parameter name="8" org.eventb.core.identifier="newnextP"/>
    </org.eventb.core.event>
    <org.eventb.core.event name="evt1" org.eventb.core.convergence="0" org.eventb.core.extended="false" org.eventb.core.label="SelectApplicablePlan">
        <org.eventb.core.guard name="0" org.eventb.core.label="grd1" org.eventb.core.predicate="intention ∈ intentions"/>
        <org.eventb.core.guard name="8" org.eventb.core.label="grd2" org.eventb.core.predicate="nextP ↦ nextP_location ∈ next_programs_to_progress(intention, belief_base, Root)"/>
        <org.eventb.core.guard name="?" org.eventb.core.comment="check the chosen top element is a set of relevant plans" org.eventb.core.label="grd3" org.eventb.core.predicate="isRelevant_plans(nextP)"/>
        <org.eventb.core.action name=")" org.eventb.core.assignment="intentions ≔ (intentions ∖ {intention}) ∪ {update_location_with_new_program(nextP_location, newnextP)}" org.eventb.core.label="act1"/>
        <org.eventb.core.guard name="D" org.eventb.core.comment="triggering_event is the destructor for Relevant_plans" org.eventb.core.label="grd4" org.eventb.core.predicate="triggering_event(nextP) = event ↦ terms"/>
        <org.eventb.core.guard name=";" org.eventb.core.comment="set_of_guarded_plan_bodies is the destructor for Relevant_plans.  " org.eventb.core.label="grd5" org.eventb.core.predicate="context ↦ applicable_plan_body ∈ set_of_guarded_plan_bodies(nextP)"/>
        <org.eventb.core.guard name="G" org.eventb.core.comment="&#10;we are not desinging most efficient unification algorithm, &#10;but rather to specify the behaviours of the semantics.&#10;Also when context is entailed by the belief base&#10;the rest of variables should be entailed as well in applicable_plan_body&#10;it means we have the following assumption no free variables in a plan&#10;that we cannot inferred from either external event or belief base." org.eventb.core.label="grd6" org.eventb.core.predicate="context ⊆ belief_base"/>
        <org.eventb.core.guard name="9" org.eventb.core.comment="&#10;an invariant, in non-declarative setting,  P1|&gt; P2,&#10;P2 is always in the Relevant_plan strucutre" org.eventb.core.label="grd7" org.eventb.core.predicate="newnextP = Try_current_with_backups(UserP_to_IntentionP(applicable_plan_body), Relevant_plans(event ↦ terms, set_of_guarded_plan_bodies(nextP) ∖ {context ↦ applicable_plan_body} )) "/>
        <org.eventb.core.parameter name="4" org.eventb.core.identifier="event"/>
        <org.eventb.core.parameter name="@" org.eventb.core.identifier="terms"/>
        <org.eventb.core.parameter name="1" org.eventb.core.identifier="intention"/>
        <org.eventb.core.parameter name="C" org.eventb.core.identifier="nextP"/>
        <org.eventb.core.parameter name="H" org.eventb.core.identifier="nextP_location"/>
        <org.eventb.core.parameter name="B" org.eventb.core.identifier="applicable_plan_body"/>
        <org.eventb.core.parameter name="E" org.eventb.core.identifier="newnextP"/>
        <org.eventb.core.parameter name="F" org.eventb.core.identifier="context"/>
    </org.eventb.core.event>
    <org.eventb.core.event name="1" org.eventb.core.convergence="0" org.eventb.core.extended="false" org.eventb.core.label="ExecuteAction">
        <org.eventb.core.parameter name="(" org.eventb.core.identifier="action"/>
        <org.eventb.core.guard name="6" org.eventb.core.label="grd1" org.eventb.core.predicate="intention ∈ intentions"/>
        <org.eventb.core.guard name="+" org.eventb.core.label="grd2" org.eventb.core.predicate="nextP ↦ nextP_location ∈ next_programs_to_progress(intention, belief_base, Root)"/>
        <org.eventb.core.action name="-" org.eventb.core.assignment="belief_base ≔ (belief_base ∖ deletion_sets[{action ↦ terms}]) ∪ addition_sets[{action ↦ terms}]" org.eventb.core.label="act1"/>
        <org.eventb.core.guard name="C" org.eventb.core.label="grd3" org.eventb.core.predicate="isBasicP_action_intention(nextP)"/>
        <org.eventb.core.guard name="&gt;" org.eventb.core.label="grd4" org.eventb.core.predicate="basic_program_action_intention(nextP) = action ↦ terms"/>
        <org.eventb.core.guard name="1" org.eventb.core.label="grd5" org.eventb.core.predicate="preconditions[{action↦terms}] ⊆ belief_base"/>
        <org.eventb.core.action name="2" org.eventb.core.assignment="intentions ≔ (intentions ∖ {intention}) ∪ {NilRemove(update_location_with_new_program(nextP_location, newnextP))}" org.eventb.core.comment="&#10;this is beautiful as this is only time nil is introduced after action exeuction&#10;the Nil; P -&gt; P semantics is captured by this operator" org.eventb.core.label="act2"/>
        <org.eventb.core.parameter name="5" org.eventb.core.identifier="terms"/>
        <org.eventb.core.parameter name="9" org.eventb.core.identifier="intention"/>
        <org.eventb.core.guard name=":" org.eventb.core.comment="add this as Rodin struggles to infer the type of newnextP when NilComp takes no argument " org.eventb.core.label="grd6" org.eventb.core.predicate="newnextP ∈  IntentionP(Belief_predicate_symbols, Event_predicate_symbols, Action_predicate_symbols, Terms)"/>
        <org.eventb.core.parameter name="B" org.eventb.core.identifier="nextP"/>
        <org.eventb.core.parameter name="E" org.eventb.core.identifier="nextP_location"/>
        <org.eventb.core.parameter name=";" org.eventb.core.identifier="newnextP"/>
        <org.eventb.core.guard name="D" org.eventb.core.label="grd7" org.eventb.core.predicate="newnextP = Nil"/>
    </org.eventb.core.event>
    <org.eventb.core.event name="evt3" org.eventb.core.convergence="0" org.eventb.core.extended="false" org.eventb.core.label="FailureRecovery">
        <org.eventb.core.parameter name="'" org.eventb.core.identifier="intention"/>
        <org.eventb.core.guard name="+" org.eventb.core.label="grd1" org.eventb.core.predicate="intention ∈ intentions"/>
        <org.eventb.core.guard name="4" org.eventb.core.label="grd2" org.eventb.core.predicate="nextP ↦ nextP_location ∈ next_programs_to_progress(intention, belief_base, Root)"/>
        <org.eventb.core.action name="." org.eventb.core.assignment="intentions ≔ (intentions ∖ {intention}) ∪ {update_location_with_new_program(try_current_with_backups_location, backups)}" org.eventb.core.comment="&#10;perform failure recovery by placing the newnextP in the location of the newnextP_location i.e. P1 |&gt; P2 becomes P2 where newnextP_location is the location of P1 |&gt; P2&#10;it encodes the transformation of P1 |&gt; P2 to P2 in update as well in a very smart way" org.eventb.core.label="act1"/>
        <org.eventb.core.parameter name="5" org.eventb.core.identifier="nextP"/>
        <org.eventb.core.parameter name="@" org.eventb.core.identifier="nextP_location"/>
        <org.eventb.core.parameter name="6" org.eventb.core.identifier="backups"/>
        <org.eventb.core.guard name="7" org.eventb.core.comment="not too happy with the current rodin defintion of no applicable plan" org.eventb.core.label="grd3" org.eventb.core.predicate="  (isBasicP_action_intention(nextP) &#10;   &#9;   ∧ ¬ (preconditions[{basic_program_action_intention(nextP)}] ⊆ belief_base)&#10;       )  &#10;∨ &#10;      (isBasicP_event_intention(nextP) &#10;      ∧ plan_rules[{basic_program_event_intention(nextP)}] = ∅&#10;      )  &#10;∨ &#10;      (isRelevant_plans(nextP) &#10;      ∧ (∀ context · context ↦ plan_body ∈ set_of_guarded_plan_bodies(nextP) ⇒ context ⊈ belief_base)&#10;      ) &#10;∨ &#10;      isFalse(nextP)"/>
        <org.eventb.core.parameter name="A" org.eventb.core.identifier="try_current_with_backups_location"/>
        <org.eventb.core.parameter name="?" org.eventb.core.identifier="plan_body"/>
        <org.eventb.core.guard name="8" org.eventb.core.comment="return the backups for the plan-body in which the current program executed is in and the location of the Try_current_with_backups" org.eventb.core.label="grd4" org.eventb.core.predicate="isSome(get_backups_for_current_plan(nextP_location))"/>
        <org.eventb.core.guard name="B" org.eventb.core.comment="element is the destructor of the Some constructor" org.eventb.core.label="grd5" org.eventb.core.predicate="backups ↦ try_current_with_backups_location = element(get_backups_for_current_plan(nextP_location))"/>
    </org.eventb.core.event>
    <org.eventb.core.event name="evt4" org.eventb.core.convergence="0" org.eventb.core.extended="false" org.eventb.core.label="DeclarativeGoalSuccess">
        <org.eventb.core.guard name="'" org.eventb.core.label="grd1" org.eventb.core.predicate="intention ∈ intentions"/>
        <org.eventb.core.parameter name="(" org.eventb.core.identifier="intention"/>
        <org.eventb.core.parameter name=")" org.eventb.core.identifier="nextP"/>
        <org.eventb.core.parameter name="1" org.eventb.core.identifier="nextP_location"/>
        <org.eventb.core.parameter name="*" org.eventb.core.identifier="newnextP"/>
        <org.eventb.core.guard name="+" org.eventb.core.label="grd2" org.eventb.core.predicate="nextP ↦ nextP_location ∈ next_programs_to_progress(intention, belief_base, Root)"/>
        <org.eventb.core.guard name="," org.eventb.core.label="grd3" org.eventb.core.predicate="isDeclarative_goal_intention(nextP)"/>
        <org.eventb.core.guard name="-" org.eventb.core.comment="&#10;note to get the nextP that satisfies isDeclarative_goal_intention(nextP), it has to satisfy one of the three conditions&#10;1. success condition holds&#10;2. failure condition holds&#10;3. brand new declarative goal that has not been initialised at all" org.eventb.core.label="grd4" org.eventb.core.predicate="success_condition(nextP) ⊆ belief_base"/>
        <org.eventb.core.guard name="." org.eventb.core.label="grd5" org.eventb.core.predicate="newnextP ∈ IntentionP(Belief_predicate_symbols,Event_predicate_symbols, Action_predicate_symbols, Terms)"/>
        <org.eventb.core.guard name="/" org.eventb.core.label="grd6" org.eventb.core.predicate="newnextP = Nil"/>
        <org.eventb.core.action name="0" org.eventb.core.assignment="intentions ≔ (intentions ∖ {intention}) ∪ {NilRemove(update_location_with_new_program(nextP_location , newnextP))}" org.eventb.core.comment="this needs NilRemove as Nil is introduced " org.eventb.core.label="act1"/>
    </org.eventb.core.event>
    <org.eventb.core.event name="evt5" org.eventb.core.convergence="0" org.eventb.core.extended="false" org.eventb.core.label="DeclarativeGoalFailure">
        <org.eventb.core.parameter name="'" org.eventb.core.identifier="intention"/>
        <org.eventb.core.parameter name="(" org.eventb.core.identifier="nextP"/>
        <org.eventb.core.parameter name="1" org.eventb.core.identifier="nextP_location"/>
        <org.eventb.core.parameter name=")" org.eventb.core.identifier="newnextP"/>
        <org.eventb.core.guard name="*" org.eventb.core.label="grd1" org.eventb.core.predicate="intention ∈ intentions"/>
        <org.eventb.core.guard name="+" org.eventb.core.label="grd2" org.eventb.core.predicate="nextP ↦ nextP_location ∈ next_programs_to_progress(intention, belief_base, Root)"/>
        <org.eventb.core.guard name="," org.eventb.core.label="grd3" org.eventb.core.predicate="isDeclarative_goal_intention(nextP)"/>
        <org.eventb.core.guard name="-" org.eventb.core.label="grd4" org.eventb.core.predicate="failure_condition(nextP) ⊆ belief_base"/>
        <org.eventb.core.guard name="." org.eventb.core.label="grd5" org.eventb.core.predicate="newnextP ∈ IntentionP(Belief_predicate_symbols,Event_predicate_symbols, Action_predicate_symbols, Terms)"/>
        <org.eventb.core.guard name="/" org.eventb.core.label="grd6" org.eventb.core.predicate="newnextP = False"/>
        <org.eventb.core.action name="0" org.eventb.core.assignment="intentions ≔ (intentions ∖ {intention}) ∪ {update_location_with_new_program(nextP_location , newnextP)}" org.eventb.core.comment="this does not need NilRemove as no Nil is introduced" org.eventb.core.label="act1"/>
    </org.eventb.core.event>
    <org.eventb.core.event name="evt6" org.eventb.core.convergence="0" org.eventb.core.extended="false" org.eventb.core.label="DeclarativeGoalInit">
        <org.eventb.core.parameter name="'" org.eventb.core.identifier="intention"/>
        <org.eventb.core.parameter name="(" org.eventb.core.identifier="nextP"/>
        <org.eventb.core.parameter name="5" org.eventb.core.identifier="nextP_location"/>
        <org.eventb.core.parameter name="+" org.eventb.core.identifier="newnextP"/>
        <org.eventb.core.guard name="," org.eventb.core.label="grd1" org.eventb.core.predicate="intention ∈ intentions"/>
        <org.eventb.core.guard name="-" org.eventb.core.label="grd2" org.eventb.core.predicate="nextP ↦ nextP_location ∈ next_programs_to_progress(intention, belief_base, Root)"/>
        <org.eventb.core.guard name="." org.eventb.core.label="grd3" org.eventb.core.predicate="isDeclarative_goal_intention(nextP)"/>
        <org.eventb.core.guard name="/" org.eventb.core.comment="equivalent to isBasicP_event_intention(procedural_program(nextP))" org.eventb.core.label="grd4" org.eventb.core.predicate="¬ isTry_current_with_backups(procedural_program(nextP))"/>
        <org.eventb.core.guard name="3" org.eventb.core.label="grd5" org.eventb.core.predicate="success_condition(nextP) ⊈ belief_base"/>
        <org.eventb.core.guard name="4" org.eventb.core.label="grd6" org.eventb.core.predicate="failure_condition(nextP) ⊈ belief_base"/>
        <org.eventb.core.guard name="1" org.eventb.core.label="grd7" org.eventb.core.predicate="newnextP = Declarative_goal_intention&#10;           (success_condition(nextP), &#10;            Try_current_with_backups(procedural_program(nextP), procedural_program(nextP)),&#10;            failure_condition(nextP)&#10;           ) "/>
        <org.eventb.core.action name="2" org.eventb.core.assignment="intentions ≔ (intentions ∖ {intention}) ∪ {update_location_with_new_program(nextP_location , newnextP)}" org.eventb.core.label="act1"/>
    </org.eventb.core.event>
    <org.eventb.core.event name="evt=" org.eventb.core.convergence="0" org.eventb.core.extended="false" org.eventb.core.label="DeclarativeGoalPersistentFailureRecovery">
        <org.eventb.core.parameter name="'" org.eventb.core.identifier="intention"/>
        <org.eventb.core.parameter name="(" org.eventb.core.identifier="nextP"/>
        <org.eventb.core.guard name="*" org.eventb.core.label="grd1" org.eventb.core.predicate="intention ∈ intentions"/>
        <org.eventb.core.guard name="+" org.eventb.core.label="grd2" org.eventb.core.predicate="nextP ↦ nextP_location ∈ next_programs_to_progress(intention, belief_base, Root)"/>
        <org.eventb.core.action name="-" org.eventb.core.assignment="intentions ≔ (intentions ∖ {intention}) ∪ {update_location_with_new_program(nextP_location , backups)}" org.eventb.core.comment="&#10;unlike standardised failure where we replace entire try_current_with_backups_location with the backups,&#10;in persistent failure recovery for declarative goal, i can simply replace P1 in P1 |&gt; P2 with P2, resulting in P2 |&gt; P2" org.eventb.core.label="act1"/>
        <org.eventb.core.guard name="7" org.eventb.core.label="grd7" org.eventb.core.predicate="isSome(get_backups_for_current_plan(nextP_location))"/>
        <org.eventb.core.guard name="9" org.eventb.core.label="grd8" org.eventb.core.predicate="backups ↦ try_current_with_backups_location = element(get_backups_for_current_plan(nextP_location))"/>
        <org.eventb.core.guard name="." org.eventb.core.comment="the initial procedural program in the declarative is often the event, in fact, my approach allow the users to put any legitimate intention program as the procedural program in a declarative goal" org.eventb.core.label="grd4" org.eventb.core.predicate="isBasicP_event_intention(backups)"/>
        <org.eventb.core.guard name="/" org.eventb.core.label="grd5" org.eventb.core.predicate="isRelevant_plans(nextP) ∧ (∀ context · context ↦ plan_body ∈ set_of_guarded_plan_bodies(nextP) ⇒ context ⊈ belief_base)"/>
        <org.eventb.core.parameter name="6" org.eventb.core.identifier="nextP_location"/>
        <org.eventb.core.parameter name="4" org.eventb.core.identifier="plan_body"/>
        <org.eventb.core.parameter name="5" org.eventb.core.identifier="backups"/>
        <org.eventb.core.parameter name="8" org.eventb.core.identifier="try_current_with_backups_location"/>
    </org.eventb.core.event>
    <org.eventb.core.event name="evt;" org.eventb.core.convergence="0" org.eventb.core.extended="false" org.eventb.core.label="Aupdate">
        <org.eventb.core.parameter name="'" org.eventb.core.identifier="intention"/>
        <org.eventb.core.guard name=")" org.eventb.core.label="grd1" org.eventb.core.predicate="intention ∈ intentions"/>
        <org.eventb.core.guard name="*" org.eventb.core.comment="&#10;either fully executed, leaving a nil&#10;or backpropogate the failure to the event comes from the external event set&#10;and such event no longer has any applicable plan." org.eventb.core.label="grd2" org.eventb.core.predicate="(&#10;      intention = Nil&#10;     ∨&#10;     ( isRelevant_plans(intention) &#10;        ∧ &#10;         (∀ context · &#10;               context ↦ plan_body ∈ set_of_guarded_plan_bodies(intention) &#10;               ⇒ context ⊈ belief_base&#10;          )&#10;      ) &#10;) "/>
        <org.eventb.core.parameter name="+" org.eventb.core.identifier="plan_body"/>
        <org.eventb.core.action name="-" org.eventb.core.assignment="intentions ≔ (intentions ∖ {intention})" org.eventb.core.label="act1"/>
    </org.eventb.core.event>
</org.eventb.core.machineFile>
